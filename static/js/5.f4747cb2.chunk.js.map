{"version":3,"sources":["../node_modules/classnames/index.js","Components/MainContent/Profile/ProfileInfo/ProfileInfo.module.css","Components/MainContent/Profile/MyPosts/MyPosts.module.css","Components/MainContent/Profile/MyPosts/Post/Post.module.css","Components/MainContent/Profile/MyPosts/Post/Post.tsx","Components/MainContent/Profile/MyPosts/MyPosts.tsx","Components/MainContent/Profile/MyPosts/MyPostsContainer.tsx","Components/MainContent/Profile/ProfileInfo/ProfileStatusHooks.tsx","Components/MainContent/Profile/ProfileInfo/UpdateDescriptionForm/UpdateDescriptionForm.tsx","Components/MainContent/Profile/ProfileInfo/ProfileDescription/ProfileDescription.tsx","Components/MainContent/Profile/ProfileInfo/ProfileInfo.tsx","Components/MainContent/Profile/Profile.tsx","Components/MainContent/Profile/ProfileContainer.tsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","Post","props","className","s","post","ava","style","background","photo","message","likesCount","MyPostForm","useForm","register","handleSubmit","errors","formState","onSubmit","data","addPost","newPostText","placeholder","required","maxLength","value","btnPost","type","MyPosts","postsData","photoSmall","postItems","map","p","id","React","memo","MyPostsContainer","connect","state","profilePage","profile","photos","small","dispatch","addPostAC","ProfileStatusHooks","status","updateUserStatus","useState","editMode","setEditMode","localValue","setLocalValue","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","UpdateDescriptionForm","goToEditMode","updateDescription","error","setError","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","then","catch","err","description","element","cn","keys","btn","color","margin","ProfileDescription","isOwner","onClick","opentowork","title","Contact","display","ProfileInfo","updateAvatar","avatarStyle","backgroundImage","large","personal_wrapper","avaWrapper","ava_img","uploadInput","target","files","uploadLabel","Preloader","isFetching","Profile","ProfileContainer","userId","this","match","params","getUserProfile","getUserStatus","history","identifyUser","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/5.f4747cb2.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"personal_wrapper\":\"ProfileInfo_personal_wrapper__2VJ32\",\"avaWrapper\":\"ProfileInfo_avaWrapper__1stZm\",\"ava_img\":\"ProfileInfo_ava_img__3OnbU\",\"uploadLabel\":\"ProfileInfo_uploadLabel__3woJy\",\"uploadInput\":\"ProfileInfo_uploadInput__1X9U2\",\"description\":\"ProfileInfo_description__1Hvbx\",\"fullName\":\"ProfileInfo_fullName__1N9Tc\",\"opentowork\":\"ProfileInfo_opentowork__krMPH\",\"element\":\"ProfileInfo_element__Maj4v\",\"contacts\":\"ProfileInfo_contacts__2_LTV\",\"btn\":\"ProfileInfo_btn__3UTTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnPost\":\"MyPosts_btnPost__2rjRK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1gymP\",\"ava\":\"Post_ava__1DoPF\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype propsType = {\r\n    message?: string\r\n    photo: string | undefined\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nconst Post = (props: propsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.ava} style={{background: `center / cover no-repeat url(${props.photo})`}} />\r\n            <div>{props.message}</div>\r\n            <span>Like</span> <span> {props.likesCount}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport {MyPostsPropsType} from './MyPostsContainer'\r\nimport {SubmitHandler, useForm} from 'react-hook-form'\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\ntype PropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nconst MyPostForm: React.FC<PropsType> = (props) => {\r\n\r\n    const {register, handleSubmit, formState: {errors}} = useForm<FormDataType>();\r\n    const onSubmit: SubmitHandler<FormDataType> = data => props.addPost(data.newPostText)\r\n\r\n    return <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n            <textarea placeholder='my news...' {...register(\"newPostText\", {\r\n                required: true,\r\n                maxLength: {\r\n                    value: 100,\r\n                    message: 'max length 100'\r\n                }\r\n            })}/>\r\n            <button className={s.btnPost}>Post</button>\r\n        </div>\r\n        {errors.newPostText?.type === \"required\" && <span>Field is required</span>}\r\n        {errors.newPostText?.message && <span>{errors.newPostText.message}</span>}\r\n\r\n    </form>\r\n}\r\n\r\nconst MyPosts = ({postsData, addPost, photoSmall}: MyPostsPropsType) => {\r\n\r\n    let postItems = postsData.map(p => <Post\r\n        key={p.id} id={p.id} photo={photoSmall}\r\n        message={p.message}\r\n        likesCount={p.likesCount}\r\n    />)\r\n\r\n    return (\r\n        <div>\r\n            <h3>My Posts</h3>\r\n            <MyPostForm addPost={addPost}/>\r\n            {postItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(MyPosts);","import MyPosts from './MyPosts'\r\nimport {AppStateType} from '../../../../Redux/store'\r\nimport {addPostAC, PostDataType} from '../../../../Redux/profile-reducer'\r\nimport {connect} from 'react-redux'\r\nimport {Dispatch} from 'redux'\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType =>\r\n    ({\r\n        postsData: state.profilePage.postsData,\r\n        photoSmall: state.profilePage.profile?.photos.small\r\n    })\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType =>\r\n    ({addPost: (newPostText: string) => dispatch(addPostAC(newPostText))})\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n//types\r\ntype mapStateToPropsType = {\r\n    postsData: PostDataType[]\r\n    photoSmall: string | undefined\r\n}\r\ntype mapDispatchToPropsType = { addPost: (newPostText: string) => void }\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType","import React, {useEffect, useState} from 'react';\r\n// import s from './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusHooks: React.FC<ProfileStatusPropsType> = ({status, updateUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [localValue, setLocalValue] = useState<string>(status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(localValue)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLocalValue(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLocalValue(status)\r\n    }, [status])\r\n\r\n    // componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: StateType) {\r\n    //     if(prevProps.status !== this.props.status) {\r\n    //         this.setState({\r\n    //             status: this.props.status\r\n    //         })\r\n    //     }\r\n    // } // пофиксили багу с отображением данных в инпуте\r\n    // // (в ProfileContainer два запроса на сервер и данные могут приходить в разной поседовательности) Lesson 74\r\n\r\n    return (\r\n        <div className={''}>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{status || \"status is not defined\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onBlur={activateViewMode}\r\n                       onChange={onStatusChange}\r\n                       value={localValue} type=\"text\"/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusHooks;","import React, {useState} from \"react\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport cn from \"classnames\";\r\nimport {ContactType, ProfileType} from \"../../../../../API/api\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    goToEditMode: () => void\r\n    updateDescription: (data: DescriptionDataType) => Promise<any>\r\n}\r\nexport const UpdateDescriptionForm: React.FC<PropsType> = (\r\n    {\r\n        profile,\r\n        goToEditMode,\r\n        updateDescription\r\n    }\r\n) => {\r\n    const [error, setError] = useState(null)\r\n    const {register, handleSubmit, formState: {errors}} = useForm<DescriptionDataType>({\r\n        defaultValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: {\r\n                facebook: profile.contacts.facebook,\r\n                github: profile.contacts.github,\r\n                instagram: profile.contacts.instagram,\r\n                mainLink: profile.contacts.mainLink,\r\n                twitter: profile.contacts.twitter,\r\n                vk: profile.contacts.vk,\r\n                website: profile.contacts.website,\r\n                youtube: profile.contacts.youtube,\r\n            }\r\n        }\r\n    })\r\n    const onSubmit: SubmitHandler<DescriptionDataType> = data => {\r\n        updateDescription(data)\r\n            .then(() => goToEditMode())\r\n            .catch((err) => setError(err))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={s.description}>\r\n            <div className={s.element}>\r\n                <span>Full Name</span>\r\n                <b>\r\n                    <input placeholder={\"full name\"} {...register(\"fullName\",\r\n                        {\r\n                            required: true\r\n                        })} />\r\n                    {errors.fullName?.type === \"required\" && <span>Field is required</span>}\r\n                </b>\r\n            </div>\r\n            <div className={s.element}>\r\n                <span>looking for a job</span>\r\n                <b><input type={\"checkbox\"} {...register(\"lookingForAJob\")}/></b>\r\n            </div>\r\n            <div className={s.element}>\r\n                <span>Job description:</span>\r\n                <b><textarea placeholder={\"job description\"} {...register(\"lookingForAJobDescription\",\r\n                    {\r\n                        required: true\r\n                    }\r\n                )}/>\r\n                    {errors.lookingForAJobDescription?.type === \"required\" && <span>Field is required</span>}\r\n                </b>\r\n            </div>\r\n            <div className={s.element}>\r\n                <span>about me</span>\r\n                <b><textarea placeholder={\"about me\"} {...register(\"aboutMe\",\r\n                    {\r\n                        required: true\r\n                    })}/>\r\n                    {errors.aboutMe?.type === \"required\" && <span>Field is required</span>}\r\n                </b>\r\n            </div>\r\n            <div className={cn(s.element, s.contacts)}>\r\n                <span>contacts</span><br/>\r\n                <b>\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        return (\r\n                            <div key={key}>\r\n                                <input placeholder={key} {...register(`contacts.${key as keyof ContactType}`)}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </b>\r\n            </div>\r\n            <input className={s.btn} type=\"submit\" value={\"send\"}/>\r\n            {error && <span style={{color: \"red\", margin: \"0 auto\"}}>{error}</span>}\r\n        </form>\r\n    )\r\n}\r\nexport type DescriptionDataType = {\r\n    aboutMe: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    contacts: ContactType\r\n}","import React from \"react\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport {ContactType, ProfileType} from \"../../../../../API/api\";\r\n\r\ntype ProfileDescriptionType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nexport const ProfileDescription: React.FC<ProfileDescriptionType> = (\r\n    {\r\n        profile,\r\n        isOwner,\r\n        goToEditMode\r\n    }\r\n) => {\r\n    return (\r\n        <>\r\n            <div className={s.fullName}>\r\n                <h3>{profile?.fullName}</h3>\r\n                {isOwner && <button onClick={goToEditMode}>Edit profile</button>}\r\n            </div>\r\n            <span className={s.opentowork}><b>{profile?.lookingForAJob ? \"Open to work\" : null}</b></span>\r\n            <hr/>\r\n            <div className={s.element}>\r\n                <span>Job description:</span><b>{profile?.lookingForAJobDescription}</b>\r\n            </div>\r\n            <hr/>\r\n            <div className={s.element}>\r\n                <span>About Me:</span><b>{profile?.aboutMe}</b>\r\n            </div>\r\n            <hr/>\r\n            <div className={s.element}>\r\n                <span>Contacts:</span>\r\n                <b>{Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} title={key} value={profile.contacts[key as keyof ContactType]}/>\r\n                })}</b>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    title: string\r\n    value: string | null\r\n}\r\nconst Contact: React.FC<ContactPropsType> = ({title, value}) => {\r\n    return (\r\n        <div style={value ? {display: \"block\"} : {display: \"none\"}}>\r\n            <b>{title}: </b>{value}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusHooks from './ProfileStatusHooks'\r\nimport {ProfileContainerPropsType} from '../ProfileContainer'\r\nimport {AddPropsType} from '../Profile'\r\nimport {UpdateDescriptionForm} from \"./UpdateDescriptionForm/UpdateDescriptionForm\";\r\nimport {ProfileDescription} from \"./ProfileDescription/ProfileDescription\";\r\n\r\nconst ProfileInfo: React.FC<ProfileContainerPropsType & AddPropsType> = (\r\n    {\r\n        updateAvatar,\r\n        profile,\r\n        status,\r\n        updateUserStatus,\r\n        updateDescription,\r\n        isOwner,\r\n    }\r\n) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const addAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files)\r\n            updateAvatar(e.target.files[0])\r\n    }\r\n\r\n    let photo;\r\n\r\n    if (!profile) {\r\n        return <Preloader isFetching/>\r\n    } else {\r\n        photo = profile.photos.large\r\n        const avatarStyle = {\r\n            backgroundImage: photo\r\n                ? `url(${photo})`\r\n                : \"url('https://avatars.mds.yandex.net/get-zen_doc/1570751/pub_5fa2a2525dc59845ddab2eb2_5fa2a4ab5dfc942ad768ab44/scale_1200')\"\r\n        }\r\n\r\n        return (\r\n            <div className={s.personal_wrapper}>\r\n                <div className={s.avaWrapper}>\r\n                    <div style={avatarStyle} className={s.ava_img}>\r\n                        {\r\n                            isOwner &&\r\n                            <>\r\n                                <input className={s.uploadInput} type={\"file\"} onChange={addAvatar}/>\r\n                                <label className={s.uploadLabel}> </label>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={s.description}>\r\n                    <b><ProfileStatusHooks status={status} updateUserStatus={updateUserStatus}/></b>\r\n                    {\r\n                        editMode\r\n                            ? <UpdateDescriptionForm profile={profile} updateDescription={updateDescription}\r\n                                                     goToEditMode={() => setEditMode(false)}/>\r\n                            : <ProfileDescription profile={profile} isOwner={isOwner}\r\n                                                  goToEditMode={() => setEditMode(true)}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\n// import s from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {ProfileContainerPropsType} from './ProfileContainer'\r\n\r\nexport type AddPropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst Profile: React.FC<ProfileContainerPropsType & AddPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            {/* <div className={s.bg_img}/> */}\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../Redux/store'\r\nimport {\r\n    getUserProfile,\r\n    updateUserStatus,\r\n    getUserStatus,\r\n    updateAvatar,\r\n    updateDescription,\r\n} from '../../../Redux/profile-reducer'\r\nimport {withRouter} from 'react-router-dom'\r\nimport {RouteComponentProps} from 'react-router'\r\nimport {compose} from 'redux'\r\nimport {DescriptionDataType} from \"./ProfileInfo/UpdateDescriptionForm/UpdateDescriptionForm\";\r\nimport {ProfileType} from \"../../../API/api\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    identifyUser() {\r\n        let userId = this.props.match.params.userId || this.props.userId?.toString()\r\n        if (userId) {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        } else {\r\n            this.props.history.push(\"/login\")\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.identifyUser()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: {}, snapshot: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId\r\n            || this.props.userId !== prevProps.userId) {\r\n            this.identifyUser()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile isOwner={!this.props.match.params.userId} {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, updateAvatar, updateDescription}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n// types\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    updateAvatar: (photo: any) => void\r\n    updateDescription: (data: DescriptionDataType) => Promise<any>\r\n}\r\nexport type ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType"],"sourceRoot":""}