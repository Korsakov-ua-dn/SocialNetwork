{"version":3,"sources":["assets/img/Spin-1s-200px.svg","Components/common/Preloader/Preloader.tsx","Components/MainContent/Profile/Profile.module.css","Components/MainContent/Profile/MyPosts/Post/Post.module.css","Components/MainContent/Profile/ProfileInfo/ProfileInfo.module.css","Components/MainContent/Profile/MyPosts/Post/Post.tsx","Components/MainContent/Profile/MyPosts/MyPosts.tsx","Components/MainContent/Profile/MyPosts/MyPostsContainer.tsx","Components/MainContent/Profile/ProfileInfo/ProfileStatusHooks.tsx","Components/MainContent/Profile/ProfileInfo/ProfileInfo.tsx","Components/MainContent/Profile/Profile.tsx","Components/MainContent/Profile/ProfileContainer.tsx"],"names":["Preloader","props","isFetching","src","preloader","alt","module","exports","Post","className","s","post","message","likesCount","MyPostForm","useForm","register","handleSubmit","errors","formState","onSubmit","data","addPost","newPostText","placeholder","required","maxLength","value","type","MyPosts","postsData","postItems","map","p","id","React","memo","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","ProfileStatusHooks","status","updateUserStatus","useState","editMode","setEditMode","localValue","setLocalValue","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","ProfileInfo","photo","profile","avatarStyle","backgroundImage","photos","large","personal_wrapper","style","ava_img","fullName","aboutMe","Profile","bg_img","ProfileContainer","userId","this","match","params","toString","history","push","getUserProfile","getUserStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.865cd20a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Spin-1s-200px.3e241178.svg\";","import preloader from \"../../../assets/img/Spin-1s-200px.svg\"\r\n\r\ntype PreloaderPropsType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst Preloader = (props: PreloaderPropsType) => {\r\n    return (\r\n        <div>\r\n            {props.isFetching ? <img src={preloader} alt=\"spinner\"/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bg_img\":\"Profile_bg_img__3dbxH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3bcGz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"personal_wrapper\":\"ProfileInfo_personal_wrapper__3tB80\",\"ava_img\":\"ProfileInfo_ava_img__3UHDo\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype propsType = {\r\n    message?: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nconst Post = (props: propsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/get-zen_doc/1570751/pub_5fa2a2525dc59845ddab2eb2_5fa2a4ab5dfc942ad768ab44/scale_1200\"\r\n                alt=\"\"/>\r\n            <span>{props.message}</span> <span>Like</span> <span> {props.likesCount}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\n// import s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport {MyPostsPropsType} from './MyPostsContainer'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\ntype PropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nconst MyPostForm: React.FC<PropsType> = (props) => {\r\n\r\n    const { register, handleSubmit, formState: { errors } } = useForm<FormDataType>();\r\n    const onSubmit: SubmitHandler<FormDataType> = data => props.addPost(data.newPostText)\r\n    \r\n\r\n    return <form  onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n            <textarea placeholder='my news...' {...register(\"newPostText\", {\r\n                required: true,\r\n                maxLength : {\r\n                value: 10,\r\n                message: 'max length 10'\r\n                }\r\n            })}/>\r\n            <button>Post</button>\r\n        </div>\r\n        {errors.newPostText?.type === \"required\" && <span>Field is required</span>}\r\n        {errors.newPostText?.message && <span>{errors.newPostText.message}</span>}\r\n       \r\n    </form>\r\n}\r\n\r\nconst MyPosts = ({postsData, addPost}: MyPostsPropsType) => {\r\n    \r\n    let postItems = postsData.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div>\r\n            <h3>My Posts</h3>\r\n\r\n            <MyPostForm addPost={addPost}/>\r\n\r\n            {postItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(MyPosts);","import MyPosts from './MyPosts'\r\nimport {AppStateType} from '../../../../Redux/redux-store'\r\nimport {addPostAC, PostDataType} from '../../../../Redux/profile-reducer'\r\nimport {connect} from 'react-redux'\r\nimport {Dispatch} from 'redux'\r\n\r\n\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => \r\n    ({postsData: state.profilePage.postsData})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => \r\n    ({addPost: (newPostText: string) => dispatch(addPostAC(newPostText))})\r\n\r\ntype mapStateToPropsType = {postsData: PostDataType[]}\r\ntype mapDispatchToPropsType = {addPost: (newPostText: string) => void}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, { useEffect, useState } from 'react';\r\n// import s from './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusHooks: React.FC<ProfileStatusPropsType> = ({status, updateUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [localValue, setLocalValue] = useState<string>(status)\r\n    \r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(localValue)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLocalValue(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => { setLocalValue(status) }, [status])\r\n\r\n    // componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: StateType) {\r\n    //     if(prevProps.status !== this.props.status) {\r\n    //         this.setState({\r\n    //             status: this.props.status\r\n    //         })\r\n    //     }\r\n    // } // пофиксили багу с отображением данных в инпуте\r\n    // // (в ProfileContainer два запроса на сервер и данные могут приходить в разной поседовательности) Lesson 74\r\n\r\n    return (\r\n        <div className={''}>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || \"status is not defined\"}</span>\r\n                </div>\r\n            }\r\n            {editMode && \r\n                <div>\r\n                    <input autoFocus onBlur={activateViewMode} \r\n                            onChange={onStatusChange}\r\n                            value={localValue} type=\"text\" />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusHooks;","import React from 'react'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusHooks from './ProfileStatusHooks'\r\nimport {ProfileType} from '../../../../Redux/profile-reducer'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    let photo;\r\n\r\n    if (!props.profile) {\r\n        return <Preloader isFetching/>\r\n    } else {\r\n        photo = props.profile.photos.large\r\n        const avatarStyle = {\r\n            backgroundImage: photo ? `url(${photo})` : \"url('https://avatars.mds.yandex.net/get-zen_doc/1570751/pub_5fa2a2525dc59845ddab2eb2_5fa2a4ab5dfc942ad768ab44/scale_1200')\"\r\n        }\r\n\r\n        return (\r\n            <div className={s.personal_wrapper}>\r\n                <div style={avatarStyle} className={s.ava_img}/>\r\n                <div>\r\n                    <h3>{props.profile.fullName}</h3>\r\n                    <ProfileStatusHooks status={props.status} updateUserStatus={props.updateUserStatus} />\r\n                    <p>Samurai Level 1</p>\r\n                    <p>{`aboutMe: ${props.profile.aboutMe}`}</p>\r\n                    <p>city: Donetsk</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {ProfileContainerPropsType} from './ProfileContainer'\r\n\r\nconst Profile = (props: ProfileContainerPropsType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.bg_img}/>\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../Redux/redux-store'\r\nimport {getUserProfile, updateUserStatus, getUserStatus, ProfileType} from '../../../Redux/profile-reducer'\r\nimport {withRouter} from 'react-router-dom'\r\nimport {RouteComponentProps} from 'react-router'\r\n// import {WithAuthRedirect} from '../../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            if(this.props.userId) userId = this.props.userId.toString() \r\n            else this.props.history.push(\"/login\")\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} />\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userId: number | null,\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}