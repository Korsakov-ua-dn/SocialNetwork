{"version":3,"sources":["Redux/auth-reducer.ts","App.module.css","Components/Header/Header.module.css","Redux/profile-reducer.ts","Redux/dialogs-reducer.ts","Redux/users-reducer.ts","API/api.ts","Components/Nav/Nav.module.css","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Nav/Nav.tsx","Components/MainContent/News/News.tsx","Components/MainContent/Music/Music.tsx","Components/MainContent/Settings/Settings.tsx","Redux/app-reducer.ts","Redux/sidebar-reducer.ts","Redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","id","email","login","isAuth","error","setUserDataAC","type","payload","getAuthUserData","dispatch","a","authApi","authMe","response","data","resultCode","password","rememberMe","res","console","log","messages","Error","logout","authReducer","state","action","module","exports","postsData","message","likesCount","profile","status","addPostAC","newPostText","setStatusAC","getUserProfile","userId","userApi","getProfile","getUserStatus","profileApi","getStatus","then","updateUserStatus","updateStatus","profileReducer","newPost","Date","getTime","filter","el","postId","dialogsData","name","messagesData","sendMessageAC","newMessageBody","dialogsReducer","users","currentPage","pageSize","totalCount","isFetching","isFollowingProgress","followSuccess","unfollowSuccess","setUsersCurrentPageAC","toggleIsFetchingAC","toggleIsFollowingProgressAC","requestUsers","getUsers","items","followUnfollowFlow","apiMethod","actionCreator","follow","bind","unfollow","usersReducer","map","u","followed","instance","axios","create","withCredentials","baseURL","headers","get","delete","post","warn","put","Header","props","className","s","header","src","alt","loginBlock","auth","onClick","to","HeaderContainer","this","React","Component","connect","Nav","nav","item","active","activeClassName","News","Music","Settings","isInit","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ThunkMiddleware","withSuspense","fallback","ProfileContainer","lazy","DialogsContainer","UsersContainer","LoginContainer","App","initializeApp","app_wrapper","app_wrapper_content","path","render","component","style","display","AppContainer","promise","Promise","all","SamuraiJSApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a311c9c.chunk.js","sourcesContent":["import {AppThunkTypes} from './redux-store'\r\nimport {authApi} from '../API/api'\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    error: '' as string\r\n}\r\n\r\nconst authReducer = (state: AuthType = initialState, action: AuthActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case \"auth/SET_ERROR\":\r\n        case \"auth/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setUserDataAC = (id: number | null, email: string| null, login: string| null, isAuth: boolean) => \r\n    ({type: \"auth/SET_USER_DATA\", payload: {id, email, login, isAuth}} as const)\r\nexport const setError = (error: string) => ({type: \"auth/SET_ERROR\", payload: {error}} as const)\r\n\r\n// thunks\r\nexport const getAuthUserData = (): AppThunkTypes => async dispatch => {\r\n    const response = await authApi.authMe()\r\n        \r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n} // асинхронная функция всегда автоматом возвращает промис!!!\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkTypes => async dispatch => {\r\n    try {\r\n        const res = await authApi.login(email, password, rememberMe)\r\n        if(res.data.resultCode === 0) {\r\n            console.log(res)\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            dispatch(setError(res.data.messages[0]))\r\n        }\r\n        \r\n    } catch (e: any) {      \r\n        throw new Error(e)\r\n    }\r\n}\r\nexport const logout = (): AppThunkTypes => async dispatch => {\r\n    const res = await authApi.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setUserDataAC(null, null, null, false))\r\n    }\r\n}\r\nexport const _login = (email: string, password: string, rememberMe: boolean): AppThunkTypes => dispatch => {\r\n    authApi.login(email, password, rememberMe)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                console.log(res)\r\n                dispatch(getAuthUserData())\r\n            }\r\n        })\r\n} // Санка посттроенная на promise .then\r\nexport const _logout = (): AppThunkTypes => dispatch => {\r\n    authApi.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setUserDataAC(null, null, null, false))\r\n            }\r\n        })\r\n} // Санка посттроенная на promise .then\r\nexport const _getAuthUserData = (): AppThunkTypes => dispatch => {\r\n    return authApi.authMe()\r\n        .then(responce => {\r\n            if (responce.data.resultCode === 0) {\r\n                let {id, email, login} = responce.data.data\r\n                dispatch(setUserDataAC(id, email, login, true))\r\n            }\r\n        })\r\n} // Санка посттроенная на promise .then\r\n\r\n// types\r\nexport type AuthType = typeof initialState\r\n\r\nexport type AuthActionsType = \r\n      ReturnType<typeof setUserDataAC> \r\n    | ReturnType<typeof setError>\r\n\r\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_wrapper\":\"App_app_wrapper__3TmHb\",\"app_wrapper_content\":\"App_app_wrapper_content__2lxRS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CBsA\",\"loginBlock\":\"Header_loginBlock__1Tq6X\"};","import { Dispatch } from 'redux'\r\nimport {userApi, profileApi} from '../API/api'\r\n\r\nexport type PostDataType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype ContactType = {\r\n    facebook: string | null\r\n    github: string | null\r\n    instagram: string | null\r\n    mainLink: string | null\r\n    twitter: string | null\r\n    vk: string | null\r\n    website: string | null\r\n    youtube: string | null\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string | null\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    contacts: ContactType\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePageType = typeof initialState\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: \"Hey, how are your samurai way?\", likesCount: 13},\r\n        {id: 2, message: \"Do not lose hope!\", likesCount: 0}\r\n    ] as Array<PostDataType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case \"profile/ADD-POST\":\r\n            let newPost: PostDataType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            }\r\n        case \"profile/SET_USER_PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"profile/SET_STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"profile/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                postsData: state.postsData.filter(el => el.id !== action.postId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addPostAC = (newPostText: string) => ({type: \"profile/ADD-POST\", newPostText} as const)\r\nexport const setUserProfileAC = (profile: ProfileType) => ({type: \"profile/SET_USER_PROFILE\", profile} as const)\r\nexport const setStatusAC = (status: string) => ({type: \"profile/SET_STATUS\", status} as const)\r\nexport const deletePostAC = (postId: number) => ({type: \"profile/DELETE_POST\", postId} as const)\r\n\r\n// thunks\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch) => {\r\n    const response = await userApi.getProfile(userId)\r\n    dispatch(setUserProfileAC(response.data))\r\n}\r\nexport const getUserStatus = (userId: string) => (dispatch: Dispatch) => {\r\n    profileApi.getStatus(userId)\r\n    .then(res => {\r\n        dispatch(setStatusAC(res.data))\r\n    })\r\n}\r\nexport const updateUserStatus = (status: string) => (dispatch: Dispatch) => {\r\n    profileApi.updateStatus(status)\r\n    .then(res => {\r\n        if (res.data.resultCode === 0)\r\n        dispatch(setStatusAC(status))\r\n    })\r\n}\r\n\r\n// types\r\ntype AddPostActionType = ReturnType<typeof addPostAC>\r\ntype SetUserProfileActionType = ReturnType<typeof setUserProfileAC>\r\ntype SetStatusActionType = ReturnType<typeof setStatusAC>\r\ntype DeletePostActionType = ReturnType<typeof deletePostAC>\r\nexport type ProfileActionType = AddPostActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n    | DeletePostActionType\r\n\r\nexport default profileReducer;","export type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogPageType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Oleg'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Vadim'},\r\n        {id: 4, name: 'Konstantin'},\r\n        {id: 5, name: 'Stepan'}\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are your Kamasutra?'},\r\n        {id: 3, message: 'Yo bro, is good'}\r\n    ] as Array<MessageType>,\r\n}\r\n\r\nconst dialogsReducer = (state: DialogPageType = initialState, action: DialogsActionsType): DialogPageType => {\r\n    switch (action.type) {\r\n        case \"dialogs/SEND-MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: action.newMessageBody}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const sendMessageAC = (newMessageBody: string) => ({type: \"dialogs/SEND-MESSAGE\", newMessageBody} as const)\r\n\r\n// types\r\ntype SendMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type DialogsActionsType = SendMessageActionType\r\n\r\nexport default dialogsReducer;","import {CommonType, userApi} from '../API/api'\r\nimport { Dispatch } from 'redux'\r\n\r\ntype LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserDataType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type UsersPageType = typeof initialState\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserDataType>,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    isFetching: false,\r\n    isFollowingProgress: [] as number[],\r\n}\r\n\r\nconst usersReducer = (state: UsersPageType = initialState, action: UsersActionType): UsersPageType => {\r\n\r\n    switch (action.type) {\r\n        case \"users/FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id !== action.userId ? u : {...u, followed: true})\r\n            }\r\n        case \"users/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id !== action.userId ? u : {...u, followed: false})\r\n            }\r\n        case \"users/SET_USERS\":\r\n            return {...state, users: action.users}\r\n        case \"users/SET_USERS_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"users/SET_TOTAL_COUNT\":\r\n            return {...state, totalCount: action.totalCount}\r\n        case \"users/TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"users/TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {...state, isFollowingProgress:\r\n                action.isFollowingProgress\r\n                    ? [...state.isFollowingProgress, action.userId]\r\n                    : state.isFollowingProgress.filter(id => id !== action.userId)\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions \r\nexport const followSuccess = (userId: number) => ({type: \"users/FOLLOW\", userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: \"users/UNFOLLOW\", userId} as const)\r\nexport const setUsersAC = (users: Array<UserDataType>) => ({type: \"users/SET_USERS\", users} as const)\r\nexport const setUsersCurrentPageAC = (currentPage: number) => ({type: \"users/SET_USERS_CURRENT_PAGE\", currentPage} as const)\r\nexport const setTotalCountAC = (totalCount: number) => ({type: \"users/SET_TOTAL_COUNT\", totalCount} as const)\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => ({type: \"users/TOGGLE_IS_FETCHING\", isFetching} as const)\r\nexport const toggleIsFollowingProgressAC = (isFollowingProgress: boolean, userId: number) =>\r\n    ({type: \"users/TOGGLE_IS_FOLLOWING_PROGRESS\", isFollowingProgress, userId} as const)\r\n\r\n\r\n// thunks    \r\nexport const requestUsers = (currentPage: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    dispatch(setUsersCurrentPageAC(currentPage))\r\n    dispatch(toggleIsFetchingAC(true))\r\n\r\n    const data = await userApi.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetchingAC(false))\r\n    dispatch(setUsersAC(data.items))\r\n    dispatch(setTotalCountAC(data.totalCount))\r\n}\r\nexport const followUnfollowFlow = \r\n    async (dispatch: Dispatch, userId: number, apiMethod: (id: number) => Promise<CommonType<{}>>, actionCreator: any ) => {\r\n\r\n    dispatch(toggleIsFollowingProgressAC(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgressAC(false, userId))\r\n}\r\nexport const follow = (userId: number) => async (dispatch: Dispatch) => {\r\n    followUnfollowFlow(dispatch, userId, userApi.follow.bind(userApi), followSuccess)\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userApi.unfollow.bind(userApi), unfollowSuccess)\r\n    }\r\n}\r\nexport const _unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFollowingProgressAC(true, userId))\r\n        userApi.unfollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgressAC(false, userId))\r\n            })\r\n    }\r\n} // осталось на память после рефакторинга дублирования кода\r\n\r\nexport type UsersActionType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setUsersCurrentPageAC>\r\n    | ReturnType<typeof setTotalCountAC>\r\n    | ReturnType<typeof toggleIsFetchingAC>\r\n    | ReturnType<typeof toggleIsFollowingProgressAC>\r\n\r\nexport default usersReducer;","import axios from 'axios'\r\nimport {UserDataType} from '../Redux/users-reducer'\r\nimport {ProfileType} from '../Redux/profile-reducer'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        'API-KEY': '7310af47-87fb-4f01-ab93-b6fcc5cb60c0'\r\n    },\r\n})\r\n\r\n\r\nexport const userApi = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<CommonType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<CommonType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn(\"Please use profileApi to make this request\");\r\n        return profileApi.getProfile(userId)\r\n    },\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`/profile/status`, {\"status\": status})\r\n    },\r\n}\r\n\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get<CommonType<{ id: number, login: string, email: string }>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<CommonType<{userId: number}>>(`/auth/login`, {\"email\": email, \"password\": password, \"rememberMe\": rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonType>(`/auth/login`)\r\n    },\r\n}\r\n\r\n\r\n// types\r\ntype GetUsersType = {\r\n    error: null | string\r\n    items: UserDataType[]\r\n    totalCount: number\r\n}\r\n\r\nexport type CommonType<T = {}> = {\r\n    data: T\r\n    messages: Array<string>\r\n    fieldsErrors: []\r\n    resultCode: number\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3B1YM\",\"item\":\"Nav_item__1FUgN\",\"active\":\"Nav_active__22ZIT\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport {HeaderContainerPropsType} from './HeaderContainer'\r\n\r\nconst Header = (props: HeaderContainerPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://res.cloudinary.com/teepublic/image/private/s--iRHIjqP9--/t_Preview/b_rgb:191919,c_limit,f_auto,h_630,q_90,w_630/v1463168513/production/designs/511305_1.jpg\"\r\n                alt=\"\"/>\r\n            <div className={s.loginBlock}>\r\n                {\r\n                    props.auth.isAuth\r\n                        ? <div>{props.auth.login} - <button onClick={props.logout}>Log out</button></div>\r\n                        : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Header from './Header'\r\nimport {logout, AuthType} from '../../Redux/auth-reducer'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {auth: AuthType}\r\ntype mapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({auth: state.auth})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from 'react';\r\nimport s from './Nav.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/dialogs' activeClassName={s.active}>Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            NEWS\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react'\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import { AppThunkTypes } from './redux-store'\r\nimport { getAuthUserData } from './auth-reducer'\r\n\r\nlet initialState = {\r\n    isInit: false\r\n}\r\n\r\nconst appReducer = (state: AppType = initialState, action: AppActionsType): AppType => {\r\n    switch (action.type) {\r\n        case \"app/SUCCESS_INIT\":\r\n            return {...state, isInit: true}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const successInit = () => ({type: \"app/SUCCESS_INIT\"} as const)\r\n\r\n// thunks\r\nexport const initializeApp = (): AppThunkTypes => dispatch => {\r\n        let promise = dispatch(getAuthUserData()) // dispatch thunk return promis\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(successInit())\r\n            })\r\n}\r\n\r\n// types\r\nexport type AppType = typeof initialState\r\n\r\ntype SuccessInit = ReturnType<typeof successInit>\r\n\r\nexport type AppActionsType = SuccessInit\r\n\r\nexport default appReducer","import {RootAppActionsType} from \"./redux-store\";\r\n\r\ntype SidebarPageType = typeof initialState\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state: SidebarPageType = initialState, action: RootAppActionsType): SidebarPageType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux'\r\nimport profileReducer, {ProfileActionType} from './profile-reducer'\r\nimport dialogsReducer, {DialogsActionsType} from './dialogs-reducer'\r\nimport usersReducer, {UsersActionType} from './users-reducer'\r\nimport sidebarReducer from './sidebar-reducer'\r\nimport authReducer, {AuthActionsType} from './auth-reducer'\r\nimport appReducer, {AppActionsType} from './app-reducer'\r\nimport ThunkMiddleware from 'redux-thunk'\r\n// import { reducer as formReducer } from 'redux-form'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    // form: formReducer, // redux-form state\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(ThunkMiddleware)\r\n)); // для Redux DevTools\r\n\r\n// const store = createStore(rootReducer, applyMiddleware(ThunkMiddleware)) // без Redux DevTools\r\n\r\n\r\n// const appActions = {setUserDataAC, stopSubmit}\r\n// type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n// export type InferActionTypes<T extends { [key: string]: (...args: any) => any }> = ReturnType<PropertiesTypes<T>>\r\n// export type AppActionTypes = InferActionTypes<typeof appActions>\r\n\r\n\r\n// types \r\nexport type AppStoreType = typeof store\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type RootAppActionsType = AuthActionsType | DialogsActionsType | ProfileActionType | UsersActionType | AppActionsType\r\n\r\nexport type AppThunkTypes<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    AppStateType,\r\n    unknown,  \r\n    RootAppActionsType\r\n>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React, { Suspense } from 'react'\r\n\r\nexport function withSuspense (Component: React.ComponentType) {\r\n\r\n    return <Suspense fallback={<div>Загрузка...</div>}>\r\n        <Component  />\r\n    </Suspense>\r\n}\r\n\r\n// export function withSuspense <WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n//     return (props: WCP) => <Suspense fallback={<div>Загрузка...</div>}>\r\n//         <Component {...props} />\r\n//     </Suspense>\r\n// } // дополнительно прокидываем пропсы","import React, { Suspense } from 'react'\r\nimport s from './App.module.css'\r\nimport HeaderContainer from './Components/Header/HeaderContainer'\r\nimport Nav from './Components/Nav/Nav'\r\nimport {HashRouter as Router, Route} from 'react-router-dom'\r\nimport News from './Components/MainContent/News/News'\r\nimport Music from './Components/MainContent/Music/Music'\r\nimport Settings from './Components/MainContent/Settings/Settings'\r\nimport { connect, Provider } from 'react-redux'\r\nimport {initializeApp} from './Redux/app-reducer'\r\nimport store, {AppStateType} from './Redux/redux-store'\r\nimport { withSuspense } from './hoc/withSuspense'\r\n\r\n// const ProfileContainer = withSuspense(React.lazy(() => import('./Components/MainContent/Profile/ProfileContainer')))\r\n// ленивая загрузка + пропсы прокидываем в компоненту\r\n\r\nconst ProfileContainer = React.lazy(() => import('./Components/MainContent/Profile/ProfileContainer'))\r\nconst DialogsContainer = React.lazy(() => import('./Components/MainContent/Dialog/DialogsContainer'))\r\nconst UsersContainer = React.lazy(() => import('./Components/MainContent/Users/UsersContainer'))\r\nconst LoginContainer = React.lazy(() => import('./Components/Login/Login'))\r\n\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`${s.app_wrapper} container`}>\r\n                <HeaderContainer/>\r\n                <Nav/>\r\n                <div className={s.app_wrapper_content}>\r\n                    <Route path='/profile/:userId?' render={ () => withSuspense(ProfileContainer) }/>\r\n                    <Route path='/dialogs' render={ () => withSuspense(DialogsContainer) }/>\r\n                    <Route path='/users'\r\n                           render={() => <Suspense fallback={<div>Загрузка...</div>}>\r\n                           <UsersContainer />\r\n                       </Suspense>}/>\r\n                    <Route path='/news' component={News}/>\r\n                    <Route path='/music' component={Music}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n                    <Route path='/login' render={() => withSuspense(LoginContainer) } />\r\n                </div>\r\n                <div style={{display: \"none\"}}>learn react</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {initializeApp: () => void}\r\ntype mapStateToPropsType = {isInit: boolean}\r\ntype AppPropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({isInit: state.app.isInit})\r\n\r\nlet AppContainer = connect(mapStateToProps, {initializeApp} )(App)\r\n\r\nconst SamuraiJSApp = () => {\r\n    return (\r\n     <Router>\r\n        <Provider store={store} >\r\n            <AppContainer />\r\n        </Provider>\r\n    </Router>\r\n    )\r\n} // для App.test\r\n\r\nexport default SamuraiJSApp","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SamuraiJSApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SamuraiJSApp />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}